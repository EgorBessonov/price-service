// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package priceService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriceClient is the client API for Price service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Price_GetClient, error)
}

type priceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceClient(cc grpc.ClientConnInterface) PriceClient {
	return &priceClient{cc}
}

func (c *priceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Price_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Price_ServiceDesc.Streams[0], "/priceService.Price/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Price_GetClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type priceGetClient struct {
	grpc.ClientStream
}

func (x *priceGetClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceServer is the server API for Price service.
// All implementations must embed UnimplementedPriceServer
// for forward compatibility
type PriceServer interface {
	Get(*GetRequest, Price_GetServer) error
	mustEmbedUnimplementedPriceServer()
}

// UnimplementedPriceServer must be embedded to have forward compatible implementations.
type UnimplementedPriceServer struct {
}

func (UnimplementedPriceServer) Get(*GetRequest, Price_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPriceServer) mustEmbedUnimplementedPriceServer() {}

// UnsafePriceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceServer will
// result in compilation errors.
type UnsafePriceServer interface {
	mustEmbedUnimplementedPriceServer()
}

func RegisterPriceServer(s grpc.ServiceRegistrar, srv PriceServer) {
	s.RegisterService(&Price_ServiceDesc, srv)
}

func _Price_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceServer).Get(m, &priceGetServer{stream})
}

type Price_GetServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type priceGetServer struct {
	grpc.ServerStream
}

func (x *priceGetServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Price_ServiceDesc is the grpc.ServiceDesc for Price service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Price_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "priceService.Price",
	HandlerType: (*PriceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Price_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "price_service.proto",
}
